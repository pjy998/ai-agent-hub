name: refactor
description: Code refactoring workflow with analysis, optimization, and validation
agents:
  - coder
  - tester

steps:
  - name: analyze
    agent: coder
    prompt: |
      Analyze the following code for refactoring opportunities:
      
      File: {{file}}
      Language: {{language}}
      Selected Code: {{selection}}
      
      Identify:
      1. Code smells and anti-patterns
      2. Performance bottlenecks
      3. Maintainability issues
      4. Security vulnerabilities
      5. Opportunities for simplification
      
      Provide analysis in JSON format: { "issues": [...], "suggestions": [...], "priority": "high|medium|low" }
    output: analysis

  - name: refactor
    agent: coder
    prompt: |
      Based on the analysis: {{analysis}}
      
      Refactor the following code:
      {{selection}}
      
      Apply these improvements:
      - Extract methods/functions for better modularity
      - Improve naming conventions
      - Optimize performance where possible
      - Enhance readability and maintainability
      - Add proper error handling
      - Follow SOLID principles
      
      Return the refactored code in markdown format with comments explaining changes.
    output: code

  - name: validate
    agent: tester
    prompt: |
      Create validation tests for the refactored code:
      Original: {{selection}}
      Refactored: {{code}}
      
      Generate tests to ensure:
      - Functional equivalence with original code
      - No regression in behavior
      - Performance improvements (if claimed)
      - Edge cases still handled correctly
      
      Return test code in markdown format.
    output: tests